CREATE TABLE DELETEE (
student_id INT   ,
name VARCHAR(40) NOT NULL UNIQUE,  -->it cannot have a null value in the table
  	 	 -->name should be unique for each row in the table
major VARCHAR(40) DEFAULT 'undecided',   -->keeping a default value in sql table
PRIMARY KEY(student_id)		 -->primary key is basically a not null & unique
);

INSERT INTO DELETEE(STUDENT_ID,NAME) VALUES (1,'SHIVA');
SELECT * FROM DELETEE;
DROP TABLE DELETEE;

CREATE TABLE EMP(
emp_id NUMBER PRIMARY KEY, emp_name VARCHAR2(20), emp_salary DECIMAL(10,2)
);


DESC EMP; 

INSERT INTO EMP VALUES(1,'AHMAD',40000);
INSERT INTO EMP VALUES(2,'MARK',35000);
INSERT INTO EMP VALUES(3,'ABID',50000);
INSERT INTO EMP VALUES(4,'RAHUL',45000);

SELECT * FROM EMP;
SELECT * FROM EMP WHERE EMP_ID=4;
SELECT EMP_NAME FROM EMP WHERE EMP_NAME='ABID';
SELECT * FROM EMP WHERE EMP_SALARY>40000;

UPDATE  EMP  SET EMP_SALARY='50000' WHERE EMP_ID=4;
UPDATE  EMP  SET EMP_SALARY='60000' WHERE EMP_SALARY='50000'; 

DELETE FROM EMP WHERE EMP_ID=4;

INSERT INTO EMP VALUES(4,'RAHUL',45000);

SELECT * FROM EMP;
SELECT * FROM EMP ORDER BY EMP_ID DESC;
SELECT * FROM EMP ORDER BY EMP_ID ASC;
SELECT EMP_NAME FROM EMP ORDER BY EMP_ID DESC;


INSERT INTO EMP VALUES(5,'MARK',35000);
SELECT DISTINCT EMP_NAME FROM EMP;
SELECT DISTINCT EMP_NAME,EMP_SALARY FROM EMP;

TRUNCATE TABLE EMP;

DROP TABLE EMP;

CREATE TABLE DEPARTMENT(DEP_ID INTEGER NOT NULL PRIMARY KEY,DEPT_NAME VARCHAR2(50));
CREATE TABLE EMPLOYEE(EMP_ID INT NOT NULL PRIMARY KEY,EMP_NAME VARCHAR2(20),EMP_SALARY DECIMAL(10,2),DEPT_ID INTEGER);
DROP TABLE EMPLOYEE;

INSERT INTO DEPARTMENT VALUES(1,'IT');
INSERT INTO DEPARTMENT VALUES(2,'HR');
INSERT INTO DEPARTMENT VALUES(3,'MEDICAL');
INSERT INTO DEPARTMENT VALUES(4,'QUALITY');
SELECT * FROM DEPARTMENT;

INSERT INTO EMPLOYEE VALUES(1,'AHMAD',40000,1);
INSERT INTO EMPLOYEE VALUES(2,'MARK',35000,2);
INSERT INTO EMPLOYEE VALUES(3,'ABID',50000,2);
INSERT INTO EMPLOYEE VALUES(4,'RAHUL',45000,1);
SELECT * FROM EMPLOYEE;
INSERT INTO EMPLOYEE VALUES(5,'RAHUL',45000,5);

SELECT * FROM EMPLOYEE WHERE EMP_SALARY>35000 AND DEPT_ID=1;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY>35000 OR DEPT_ID=1;
SELECT * FROM EMPLOYEE WHERE EMP_SALARY>35000 AND (DEPT_ID=1 OR DEPT_ID=2) ;

INSERT INTO EMPLOYEE VALUES(5,'UZMA',30000,3);
INSERT INTO EMPLOYEE VALUES(6,'SEAN',40000,4);
SELECT * FROM EMPLOYEE WHERE DEPT_ID IN(1,3);
SELECT * FROM EMPLOYEE WHERE EMP_NAME IN('AHMAD','RAHUL');
SELECT * FROM EMPLOYEE WHERE DEPT_ID NOT IN(1,3);
SELECT * FROM EMPLOYEE WHERE EMP_SALARY BETWEEN 35000 AND 40000;

SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE 'A%';
SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE '%H%';
SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE '_B%';
SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE '__M%';

SELECT DEPT_ID FROM EMPLOYEE UNION SELECT DEPT_ID FROM EMPLOYEE;
SELECT DEPT_ID FROM EMPLOYEE UNION ALL SELECT DEPT_ID FROM EMPLOYEE;
SELECT DEPT_ID FROM EMPLOYEE UNION ALL SELECT DEPT_ID FROM EMPLOYEE ORDER BY DEPT_ID;

SELECT EMP_ID "ID",EMP_NAME "EMPLOYEE NAME",EMP_SALARY "SALARY",DEPT_ID "DEPARTMENT ID" FROM EMPLOYEE;
SELECT EMP_NAME,EMP_SALARY,DEPT_NAME FROM EMPLOYEE E, DEPARTMENT D WHERE E.DEPT_ID=D.DEP_ID; 

INSERT INTO EMPLOYEE VALUES(7,'ASEAN',47000,6);
INSERT INTO DEPARTMENT VALUES(5,'CAFTERIA');
SELECT E.EMP_ID,E.EMP_NAME,E.EMP_SALARY,D.DEPT_NAME FROM EMPLOYEE E INNER JOIN DEPARTMENT D ON E.DEPT_ID=D.DEP_ID; 
SELECT E.EMP_ID,E.EMP_NAME,E.EMP_SALARY,D.DEPT_NAME FROM EMPLOYEE E LEFT JOIN DEPARTMENT D ON E.DEPT_ID=D.DEP_ID; 
SELECT E.EMP_ID,E.EMP_NAME,E.EMP_SALARY,D.DEPT_NAME FROM EMPLOYEE E RIGHT JOIN DEPARTMENT D ON E.DEPT_ID=D.DEP_ID; 
SELECT E.EMP_ID,E.EMP_NAME,E.EMP_SALARY,D.DEPT_NAME FROM EMPLOYEE E FULL JOIN DEPARTMENT D ON E.DEPT_ID=D.DEP_ID; 
SELECT E.EMP_ID,E.EMP_NAME,E.EMP_SALARY,D.DEPT_NAME FROM EMPLOYEE E CROSS JOIN DEPARTMENT D;
SELECT E.EMP_ID,E.EMP_NAME,E.EMP_SALARY,D.DEPT_NAME FROM EMPLOYEE E NATURAL JOIN DEPARTMENT D;
SELECT E1.EMP_ID,E1.EMP_NAME,E1.EMP_SALARY FROM EMPLOYEE E1, EMPLOYEE E2 WHERE E1.EMP_ID=E2.EMP_ID;
SELECT E1.EMP_ID,E1.EMP_NAME,E1.EMP_SALARY FROM EMPLOYEE E1 INNER JOIN EMPLOYEE E2 ON E1.EMP_ID=E2.EMP_ID;

SELECT TABLESPACE_NAME FROM USER_TABLESPACES;
SELECT TABLESPACE_NAME,FILE_NAME, BYTES FROM DBA_DATA_FILES;
CREATE TABLESPACE TEST DATAFILE 'C:\Oracledatabase\Appdb\oradata\ORCL\TEST1.DBF' SIZE 50M;
DROP TABLESPACE TEST;

CREATE TABLESPACE TEST DATAFILE 'C:\Oracledatabase\Appdb\oradata\ORCL\TEST1.DBF' SIZE 50M;
CREATE USER C##SHIVA IDENTIFIED BY SHIVA
	   DEFAULT TABLESPACE TEST
	   TEMPORARY TABLESPACE TEMP
	   QUOTA UNLIMITED ON TEST; 
CREATE ROLE C##DEMO;
GRANT CREATE TABLE,CREATE SESSION TO C##DEMO;
GRANT C##DEMO TO C##SHIVA;

DROP TABLESPACE TEST;
DROP USER C##SHIVA;
DROP ROLE C##DEMO;

ALTER TABLESPACE TEST ADD DATAFILE 'C:\Oracledatabase\Appdb\oradata\ORCL\TEST2.DBF' SIZE 40M;
SELECT TABLESPACE_NAME,FILE_NAME, BYTES FROM DBA_DATA_FILES;
ALTER TABLESPACE TEST DROP DATAFILE 'C:\Oracledatabase\Appdb\oradata\ORCL\TEST2.DBF';
SELECT TABLESPACE_NAME,FILE_NAME, BYTES FROM DBA_DATA_FILES;
DROP TABLESPACE TEST INCLUDING CONTENTS AND DATAFILES;

SELECT * FROM EMPLOYEE;
DESC EMPLOYEE;
ALTER TABLE EMPLOYEE ADD EMP_ADDRESS VARCHAR2(50);
ALTER TABLE EMPLOYEE RENAME COLUMN EMP_ADDRESS TO ADDRESS;
ALTER TABLE EMPLOYEE MODIFY ADDRESS NUMBER;
ALTER TABLE EMPLOYEE MODIFY ADDRESS NUMBER UNIQUE;
ALTER TABLE EMPLOYEE DROP COLUMN ADDRESS;
 
DROP TABLE DEPARTMENTT;
CREATE TABLE DEPARTMENTT(DEPT_ID NUMBER PRIMARY KEY,DEPT_NAME VARCHAR2(50));
INSERT INTO DEPARTMENTT VALUES(1,'IT');
INSERT INTO DEPARTMENTT VALUES(2,'HR');
INSERT INTO DEPARTMENTT VALUES(3,'MEDICAL');
INSERT INTO DEPARTMENTT VALUES(4,'QUALITY');
SELECT * FROM DEPARTMENTT;
CREATE TABLE EMPLOYEEE(EMP_ID NUMBER PRIMARY KEY,EMP_NAME VARCHAR2(30),EMP_SALARY DECIMAL(10,2),
DEPT_ID INTEGER REFERENCES DEPARTMENTT);
DROP TABLE EMPLOYEEE;
CREATE TABLE EMPLOYEEE(EMP_ID NUMBER PRIMARY KEY,EMP_NAME VARCHAR2(30),EMP_SALARY DECIMAL(10,2),
DEPT_ID INTEGER REFERENCES DEPARTMENTT ON DELETE CASCADE);
INSERT INTO EMPLOYEEE VALUES(1,'AHMAD',40000,1);
INSERT INTO EMPLOYEEE VALUES(2,'MARK',35000,2);
INSERT INTO EMPLOYEEE VALUES(3,'ABID',50000,2);
INSERT INTO EMPLOYEEE VALUES(4,'RAHUL',40000,1);
INSERT INTO EMPLOYEEE VALUES(5,'UZMA',30000,3);
INSERT INTO EMPLOYEEE VALUES(6,'SEAN',40000,4);
SELECT * FROM EMPLOYEEE;
DELETE FROM DEPARTMENTT WHERE DEPT_ID=2;

INSERT INTO EMPLOYEEE VALUES(7,'ABID',50000,2);
INSERT INTO EMPLOYEEE VALUES(8,'RAHUL',40000,1);
INSERT INTO EMPLOYEEE VALUES(9,'MARK',35000,2);
INSERT INTO EMPLOYEEE VALUES(10,'AHMAD',40000,1);

SELECT EMP_NAME FROM EMPLOYEEE GROUP BY EMP_NAME; 
DELETE FROM EMPLOYEEE WHERE EMP_ID=10;
SELECT * FROM EMPLOYEEE;

SELECT COUNT(*) FROM EMPLOYEEE;
SELECT COUNT(EMP_SALARY) FROM EMPLOYEEE;
SELECT MIN(EMP_SALARY) FROM EMPLOYEEE;
SELECT MAX(EMP_SALARY) FROM EMPLOYEEE;
SELECT AVG(EMP_SALARY) FROM EMPLOYEEE;
SELECT STDDEV(EMP_SALARY) FROM EMPLOYEEE;
SELECT VARIANCE(EMP_SALARY) FROM EMPLOYEEE;
SELECT SUM(EMP_SALARY) FROM EMPLOYEEE;
SELECT EMP_SALARY,COUNT(*) FROM EMPLOYEEE GROUP BY EMP_SALARY;
SELECT EMP_SALARY,COUNT(EMP_SALARY) FROM EMPLOYEEE GROUP BY EMP_SALARY;
SELECT EMP_SALARY,COUNT(EMP_ID) FROM EMPLOYEEE GROUP BY EMP_SALARY;
SELECT EMP_SALARY,SUM(EMP_SALARY) FROM EMPLOYEEE GROUP BY EMP_SALARY;
 
CREATE TABLE SUPPLIER(SUPPLIER_ID NUMBER PRIMARY KEY,SUPPLIER_NAME VARCHAR2(50));
INSERT INTO SUPPLIER VALUES(1,'DELL');
INSERT INTO SUPPLIER VALUES(2,'LENOVO');
INSERT INTO SUPPLIER VALUES(3,'HP');
INSERT INTO SUPPLIER VALUES(4,'AMAZON');
SELECT * FROM SUPPLIER;
CREATE TABLE PRODUCTSS(PRO_ID NUMBER PRIMARY KEY,PRO_NAME VARCHAR2(30),PRO_PRICE DECIMAL(10,2),
SUPPLIER_ID INTEGER REFERENCES SUPPLIER ON DELETE CASCADE);
INSERT INTO PRODUCTSS VALUES(1,'MOUSE',100,2);
INSERT INTO PRODUCTSS VALUES(2,'KEYBOARD',150,1);
INSERT INTO PRODUCTSS VALUES(3,'HHD',1000,4);
INSERT INTO PRODUCTSS VALUES(4,'MOUSE',200,1);
INSERT INTO PRODUCTSS VALUES(5,'KEYBOARD',100,2);
INSERT INTO PRODUCTSS VALUES(6,'MOUSE',150,3);
SELECT * FROM PRODUCTSS;

SELECT PRO_NAME,COUNT(*) FROM PRODUCTSS GROUP BY PRO_NAME;
SELECT PRO_NAME,COUNT(*) FROM PRODUCTSS GROUP BY PRO_NAME HAVING COUNT(*)>2;
SELECT PRO_NAME,SUM(PRO_PRICE) FROM PRODUCTSS GROUP BY PRO_NAME;
SELECT PRO_NAME,SUM(PRO_PRICE) FROM PRODUCTSS GROUP BY PRO_NAME HAVING SUM(PRO_PRICE)>250;

SELECT * FROM EMPLOYEEE;
SELECT UPPER(EMP_NAME) FROM EMPLOYEEE;
SELECT LOWER(EMP_NAME) FROM EMPLOYEEE;
SELECT INITCAP(EMP_NAME) FROM EMPLOYEEE;
SELECT * FROM EMPLOYEEE WHERE EMP_NAME='Ahmad';
SELECT * FROM EMPLOYEEE WHERE INITCAP(EMP_NAME)='Ahmad';
SELECT CONCAT(EMP_NAME,EMP_SALARY) FROM EMPLOYEEE;
SELECT SUBSTR('I AM SHIVA',3,2) FROM DUAL; -->3-->CHARCTER ,2-->STRING
SELECT LENGTH('I AM SHIVA') FROM DUAL;
SELECT EMP_NAME FROM EMPLOYEEE WHERE LENGTH (EMP_NAME)=5;
SELECT INSTR('I AM SHIVA','SHIVA') FROM DUAL; -->STRING LOCATION
SELECT LPAD('SHIVA',2) FROM DUAL; 
SELECT ' SHIVA ' FROM DUAL;
SELECT TRIM(' SHIVA ') FROM DUAL;
SELECT REPLACE ('123SHIVA123','123') FROM DUAL; -->DUAL IS DUMMY TABLE

SELECT CEIL(12.3) FROM DUAL;
SELECT FLOOR(127.6) FROM DUAL;
SELECT  ROUND(12.55654546,3) FROM DUAL;
SELECT POWER(5,3) FROM DUAL;
SELECT MOD(9,5) FROM DUAL;
SELECT SQRT(9) FROM DUAL;
SELECT ABS(-29) FROM DUAL;
SELECT TRUNC(29.16,1) FROM DUAL;

-->CONVERSION FUNCTIONS
CREATE TABLE EMPLOYEEDATA(EMP_ID NUMBER PRIMARY KEY, EMP_NAME VARCHAR2(20),
EMP_SALARY DECIMAL(10,2),JOIN_DATE DATE, COUNTRY VARCHAR2(50));
INSERT INTO EMPLOYEEDATA VALUES(1,'AHMAD',50000,'1-JAN-2020','PAK');
INSERT INTO EMPLOYEEDATA VALUES(2,'MARK',50000,TO_DATE('2020-JAN-1','YYYY-MM-DD'),'USA');
INSERT INTO EMPLOYEEDATA VALUES(3,'UZMA',50000,TO_DATE('2020-MARCH-1','YYYY-MM-DD'),'UAE');
SELECT * FROM EMPLOYEEDATA; 
SELECT EMP_NAME,TO_CHAR(JOIN_DATE,'MM') FROM EMPLOYEEDATA;
SELECT EMP_NAME,NVL(EMP_SALARY,5000) FROM EMPLOYEEDATA;
SELECT EMP_NAME,DECODE(COUNTRY,'PAK','PAKISTAN','USA','UNITED STATES OF AMERICA' ) FROM EMPLOYEEDATA;

CREATE TABLE STUDENTS(STD_ID NUMBER,STD_NAME VARCHAR2(20) UNIQUE NULL);
DROP TABLE STUDENTS;

CREATE TABLE DEPARTMENTS (DEP_ID NUMBER PRIMARY KEY,DEPT_NAME VARCHAR2(50));
CREATE TABLE STUDENTS(STD_ID NUMBER PRIMARY KEY,STD_NAME VARCHAR2(30),DEP_ID NUMBER REFERENCES DEPARTMENTS);
DROP TABLE STUDENTS;
DROP TABLE DEPARTMENTS;

-->CREATING A SEQUENCE
CREATE TABLE STUDENTS(STD_ID NUMBER PRIMARY KEY,STD_NAME VARCHAR2(20));
CREATE SEQUENCE STD_SEQ INCREMENT BY 1 START WITH 100 MAXVALUE 999 MINVALUE 1 NOCYCLE NOCACHE NOORDER;
INSERT INTO STUDENTS VALUES (STD_SEQ.NEXTVAL,'AHMAD');
SELECT STD_SEQ.CURRVAL FROM STUDENTS;
SELECT * FROM STUDENTS;
INSERT INTO STUDENTS VALUES (STD_SEQ.NEXTVAL,'MARK');
INSERT INTO STUDENTS VALUES (STD_SEQ.NEXTVAL,'UZMA');

-->PSEUDOCOLUMNS
SELECT SYSDATE FROM DUAL;
SELECT SYSTIMESTAMP FROM DUAL;
SELECT  UID FROM DUAL;
SELECT USER FROM DUAL;
SELECT ROWID,EMP_NAME FROM EMPLOYEE;
SELECT ROWNUM,EMP_NAME FROM EMPLOYEE;
SELECT ROWNUM,EMP_NAME FROM EMPLOYEE WHERE ROWNUM<3;

-->Subquery
SELECT * FROM EMPLOYEE WHERE EMP_SALARY=(SELECT MAX(EMP_SALARY) FROM EMPLOYEE);
SELECT * FROM EMPLOYEE WHERE EMP_SALARY IN( SELECT EMP_SALARY FROM EMPLOYEE WHERE EMP_SALARY>30000);
SELECT EMP_NAME FROM EMPLOYEE WHERE EMP_SALARY IN( SELECT EMP_SALARY FROM EMPLOYEE WHERE EMP_SALARY>30000);

-->Data Dictionary
SELECT * FROM TAB;
SELECT * FROM ALL_TABLES; 
SELECT * FROM ALL_SEQUENCES;
SELECT * FROM ALL_VIEWS;
SELECT * FROM ALL_CONSTRAINTS;

-->Execute commands written in Notepad file
SELECT * FROM EMPLOYEEE;
START C:\Users\a861892\Downloads\EMPLOYEEE.TXT;
START C:\Users\a861892\Downloads\EMPLOYEEE.SQL;

-->Reports
SPOOL C:\Users\a861892\Downloads\EMPREPORT.TXT;
SET PAGESIZE  10
SET LINESIZE 150 
SET PAUSE ON 
SET PAUSE 'PRESS ANY KEY..' 
TTITLE LEFT 'EMPLOYEE REPORT'  
BTITLE LEFT 'End Report'  
COLUMN EMP_NAME FORMAT A5 TRUNC 
SELECT E.EMP_ID,E.EMP_NAME,E.EMP_SALARY,D.DEPT_NAME FROM EMPLOYEE E,DEPARTMENT D WHERE E.DEPT_ID=D.DEP_ID; 
CLEAR COLUMN
TTITLE OFF 
SET PAUSE OFF 
SET LINESIZE 80  
SET PAGESIZE 24 
SPOOL OFF


-->Views
SELECT * FROM EMPLOYEE;
CREATE VIEW EMPLOYEE_VIEW AS SELECT EMP_NAME ,EMP_SALARY FROM EMPLOYEE;  -->CREATING A VIEW
SELECT * FROM EMPLOYEE_VIEW;
CREATE OR REPLACE VIEW EMPLOYEE_VIEW AS SELECT * FROM EMPLOYEE-->EDITING OR MODIFYING A VIEW
SELECT * FROM EMPLOYEE_VIEW;
INSERT INTO EMPLOYEE_VIEW VALUES (8,'NADEEM',40000,4);-->Inserting value
SELECT * FROM EMPLOYEE_VIEW;
SELECT * FROM EMPLOYEE;
DELETE FROM EMPLOYEE WHERE EMP_ID =8;
CREATE OR REPLACE VIEW EMPLOYEE_VIEW AS SELECT * FROM EMPLOYEE WHERE EMP_SALARY=40000 WITH CHECK OPTION;
SELECT * FROM EMPLOYEE_VIEW;
DROP VIEW EMPLOYEE_VIEW; -->DELETING A VIEW

-->Input Variable
SELECT * FROM EMPLOYEE;
ACCEPT ENAME CHAR PROMPT 'PLEASE ENTER EMPLOYEE NAME ';
SELECT * FROM EMPLOYEE WHERE EMP_NAME='&ENAME';

-->Define Variable
SELECT * FROM EMPLOYEE;
DEFINE EID=7;
SELECT * FROM EMPLOYEE WHERE EMP_ID=&EID;
DEFINE;
UNDEFINE EID;

-------------------------------PL/SQL------------------------------------------
SET SERVEROUTPUT ON;
DECLARE
MESSAGE VARCHAR2(50);
BEGIN
MESSAGE:='WELCOME TO ATOS SYNTEL-BANGALORE';
DBMS_OUTPUT.PUT_LINE(MESSAGE);
END;
SET SERVEROUTPUT OFF;


SELECT * FROM EMPLOYEE;
SET SERVEROUTPUT ON;
DECLARE
NAME EMPLOYEE.EMP_NAME%TYPE;
SALARY EMPLOYEE.EMP_SALARY%TYPE;
MSG NUMBER;
BEGIN
SELECT EMP_NAME,EMP_SALARY INTO NAME,SALARY FROM EMPLOYEE WHERE EMP_ID=&MSG;
DBMS_OUTPUT.PUT_LINE(NAME);
DBMS_OUTPUT.PUT_LINE(SALARY);
END;
SET SERVEROUTPUT OFF;


--IF STATEMENT, IF-ELSE STATEMENT & ELSE-IF STATEMENT
SELECT * FROM EMPLOYEE;
SET SERVEROUTPUT ON;
DECLARE 
E_SALES NUMBER:=50000;
E_COMMISION NUMBER:=0;
BEGIN
IF E_SALES>40000 THEN E_COMMISION:=(E_SALES*10)/100;
DBMS_OUTPUT.PUT_LINE('YOUR COMMISSION IS 10% EQUAL TO:'||E_COMMISION);
END IF;
END;
SET SERVEROUTPUT OFF;

-->IF ELSE
SELECT * FROM EMPLOYEE;
SET SERVEROUTPUT ON;
DECLARE 
E_SALES NUMBER:=30000;
E_COMMISION NUMBER:=0;
BEGIN
IF E_SALES>40000 THEN E_COMMISION:=(E_SALES*10)/100;
DBMS_OUTPUT.PUT_LINE('YOUR COMMISSION IS 10% EQUAL TO:'||E_COMMISION);
ELSE
DBMS_OUTPUT.PUT_LINE('YOUR COMMISSION IS 02% EQUAL TO:'||(E_SALES*2)/100);
END IF;
END;
SET SERVEROUTPUT OFF;

-->ELSE IF
SELECT * FROM EMPLOYEE;
SET SERVEROUTPUT ON;
DECLARE 
E_SALES NUMBER:=40000;
E_COMMISION NUMBER:=0;
BEGIN
IF E_SALES>40000 THEN E_COMMISION:=(E_SALES*10)/100;
DBMS_OUTPUT.PUT_LINE('YOUR COMMISSION IS 10% EQUAL TO:'||E_COMMISION);
ELSIF E_SALES <=40000 AND E_SALES >30000 THEN E_COMMISION:=(E_SALES*5)/100;
DBMS_OUTPUT.PUT_LINE('YOUR COMMISSION IS 5% EQUAL TO:'||E_COMMISION);
ELSE
DBMS_OUTPUT.PUT_LINE('YOUR COMMISSION IS 02% EQUAL TO:'||(E_SALES*2)/100);
END IF;
END;
SET SERVEROUTPUT OFF;

-->BASIC LOOP
SET SERVEROUTPUT ON;
DECLARE
I NUMBER :=0;
BEGIN 
LOOP
I:=I+1;
EXIT WHEN I>10;    -->EXIT WHEN example
DBMS_OUTPUT.PUT_LINE('VALUE OF I WITH EXIT WHEN CONDITION:'||I);
END LOOP;
END;
SET SERVEROUTPUT OFF;

SET SERVEROUTPUT ON;
DECLARE
I NUMBER :=0;
BEGIN 
LOOP
I:=I+1;
IF I>10 THEN EXIT;
END IF;
DBMS_OUTPUT.PUT_LINE('VALUE OF I WITH ONLY EXIT CONDITION:'||I);
END LOOP;
END;
SET SERVEROUTPUT OFF;

-->USING LABELS IN LOOPS
SET SERVEROUTPUT ON;
DECLARE 
I NUMBER:=0;
J NUMBER:=0;
BEGIN 
<<OUTER_LOOP>> LOOP
I:=I+1;
EXIT OUTER_LOOP WHEN I>2;
DBMS_OUTPUT.PUT_LINE('OUTER LOOP:'||I);
J:=0;
<<INNER_LOOP>> LOOP
J:=J+1;
EXIT INNER_LOOP WHEN J>3;
DBMS_OUTPUT.PUT_LINE('INNER LOOP:'||J);
END LOOP INNER_LOOP;
END LOOP OUTER_LOOP;
END;
SET SERVEROUTPUT OFF;

-->WHILE LOOP
SET SERVEROUTPUT ON;
DECLARE
I NUMBER :=1;
BEGIN
WHILE I<=10
LOOP
DBMS_OUTPUT.PUT_LINE('VALUE OF I IN WHILE LOOP IS: '||I);
I:=I+1;
END LOOP;
END;
SET SERVEROUTPUT OFF;

-->ADDING EXIT WHEN CONDITION IN WHILE LOOP
SET SERVEROUTPUT ON;
DECLARE
I NUMBER :=1;
BEGIN
WHILE I<=10
LOOP
DBMS_OUTPUT.PUT_LINE('VALUE OF I IN WHILE LOOP IS: '||I);
I:=I+1;
EXIT WHEN I=3;
END LOOP;
END;
SET SERVEROUTPUT OFF;

-->OTHER EXAMPLE FOR WHILE LOOP I.E TABLES EXAMPLE
SET SERVEROUTPUT ON;
DECLARE
VAR1 NUMBER;
VAR2 NUMBER;
BEGIN
VAR1:=200;
VAR2:=1;
WHILE VAR2<=10
LOOP
DBMS_OUTPUT.PUT_LINE(VAR1*VAR2);
VAR2:=VAR2+1;
END LOOP;
END;
SET SERVEROUTPUT OFF;

-->FOR VALUE
-->printing numbers from 1 to 5 using for loop
SET SERVEROUTPUT ON;
BEGIN
FOR I IN 1..5 LOOP
DBMS_OUTPUT.PUT_LINE('VALUE OF I IN FOR LOOP:'||I);
END LOOP;
END;
SET SERVEROUTPUT OFF;

--> TABLES USING FOR LOOP
SET SERVEROUTPUT ON;
DECLARE
VAR1 NUMBER;
BEGIN 
VAR1:=100;
FOR VAR2 IN 1..10 LOOP
DBMS_OUTPUT.PUT_LINE(VAR1*VAR2);
END LOOP;
END;
SET SERVEROUTPUT OFF;

-->using sql statements in for loop
SET SERVEROUTPUT ON;
BEGIN
FOR E IN(SELECT * FROM EMPLOYEE) LOOP
IF E.EMP_SALARY =40000 THEN
DBMS_OUTPUT.PUT_LINE('ID:'||E.EMP_ID||',NAME:'||E.EMP_NAME||',SALARY:'||E.EMP_SALARY);
END IF;
END LOOP;
END;
SET SERVEROUTPUT OFF;

-->Implicit Cursor
SELECT * FROM EMPLOYEE;
SET SERVEROUTPUT ON;
DECLARE 
TOTAL_ROWS NUMBER;
BEGIN
UPDATE EMPLOYEE SET EMP_SALARY=EMP_SALARY+5000;
IF SQL%NOTFOUND THEN 
DBMS_OUTPUT.PUT_LINE('RECORD NOT UPDATED');
ELSIF SQL%FOUND THEN
TOTAL_ROWS:=SQL%ROWCOUNT;
DBMS_OUTPUT.PUT_LINE('TOTAL ROWS UPDATED:'||TOTAL_ROWS);
END IF;
END;
SET SERVEROUTPUT OFF;

-->Explicit Cursor
SELECT * FROM EMPLOYEE; 
SET SERVEROUTPUT ON;
DECLARE
E_ID EMPLOYEE.EMP_ID%TYPE;
E_NAME EMPLOYEE.EMP_NAME%TYPE;
E_SALARY EMPLOYEE.EMP_SALARY%TYPE;
CURSOR E_EMPLOYEE IS
SELECT EMP_ID,EMP_NAME,EMP_SALARY FROM EMPLOYEE;
BEGIN 
OPEN E_EMPLOYEE;
LOOP
FETCH E_EMPLOYEE INTO E_ID,E_NAME,E_SALARY;
EXIT WHEN E_EMPLOYEE%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(E_ID||' : '||E_NAME||' : '||E_SALARY);
END LOOP;
CLOSE E_EMPLOYEE;
END;
SET SERVEROUTPUT OFF;

-->TRIGGERS--we will pass the values from employee to new employee if the salary is updated/modified
SELECT * FROM EMPLOYEE; 
CREATE TABLE NEW_EMPLOYEE(ID INT NOT NULL PRIMARY KEY, SALARY DECIMAL(10,2),MESSAGE VARCHAR2(60));
SELECT * FROM NEW_EMPLOYEE; 

CREATE TRIGGER TRIGGER_EMP
AFTER UPDATE OF EMP_SALARY ON EMPLOYEE
FOR EACH ROW
BEGIN
INSERT INTO NEW_EMPLOYEE(ID,SALARY,MESSAGE)
VALUES(:OLD.EMP_ID,:NEW.EMP_SALARY,'RECORD IS UPDATED');
END;

UPDATE EMPLOYEE SET EMP_SALARY=40000 WHERE EMP_ID=1;
SELECT * FROM EMPLOYEE;
SELECT * FROM NEW_EMPLOYEE;

DROP TRIGGER TRIGGER_EMP;
DROP TABLE NEW_EMPLOYEE;

--->PL/SQL PROCEDURE
CREATE OR REPLACE PROCEDURE WELCOME 
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('WELCOME TO EVIDIEN-BANGALORE');
END;

SET SERVEROUT ON;
BEGIN 
WELCOME;
END;
SET SERVEROUT OFF;

DROP PROCEDURE WELCOME;

-->PROCEDURE EXAMPLE-2
SELECT * FROM DEPARTMENT;
CREATE OR REPLACE PROCEDURE INSERT_DEPT(DEPT_ID IN NUMBER ,DEPT_NAME IN VARCHAR2)
IS
BEGIN
INSERT INTO DEPARTMENT VALUES(DEPT_ID,DEPT_NAME);
END INSERT_DEPT;
SET SERVEROUTPUT ON;
BEGIN
INSERT_DEPT(6,'RECEPTION');
END;
SELECT * FROM DEPARTMENT;
DELETE FROM DEPARTMENT WHERE DEP_ID=6;
SET SERVEROUTPUT OFF;
DROP PROCEDURE INSERT_DEPT;

-->PROCEDURE EXAMPLE -3
-->TAKING SALARY AMOUNT ADN ID FROM THE USER & ADDING IT TO THE RESPECTIVE ID OF EMPLOYEE TABLE.
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE UPDATE_EMP(
ID IN NUMBER,AMOUNT IN NUMBER ,D OUT NUMBER) 
IS
BEGIN
UPDATE EMPLOYEE SET EMP_SALARY=EMP_SALARY +AMOUNT WHERE EMP_ID=ID;
SELECT EMP_SALARY INTO D FROM EMPLOYEE WHERE EMP_ID=ID;
DBMS_OUTPUT.PUT_LINE(D);
END UPDATE_EMP;

SET SERVEROUTPUT ON;
VARIABLE K NUMBER;
EXECUTE UPDATE_EMP(1,10000,:K);
SET SERVEROUTPUT OFF;
SELECT * FROM EMPLOYEE;
DROP PROCEDURE UPDATE_EMP;

-->FUNCTION
-->EXAMPLE 1
CREATE OR REPLACE FUNCTION ADD_NUMBER(
N1 IN NUMBER, N2 IN NUMBER)
RETURN NUMBER
IS
N3 NUMBER;
BEGIN
N3:=N1+N2;
RETURN N3;
END ADD_NUMBER;

SET SERVEROUTPU ON;
DECLARE
N3 NUMBER;
BEGIN
N3:=ADD_NUMBER(50,20);
DBMS_OUTPUT.PUT_LINE('ADDITION IS :'|| N3);
END;
SET SERVEROUTPU OFF;
DROP FUNCTION ADD_NUMBER;

-->FUNCTION EXAMPLE 2
-->Taking salary amount & ID  from the user & adding it to the respective ID of Employee Table.
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE FUNCTION UPDATE_SAL(
ID IN NUMBER,AMOUNT IN NUMBER)
RETURN NUMBER
IS 
D NUMBER;
BEGIN
UPDATE EMPLOYEE SET EMP_SALARY=EMP_SALARY+AMOUNT WHERE EMP_ID=ID;
SELECT EMP_SALARY INTO D FROM EMPLOYEE WHERE EMP_ID=ID;
DBMS_OUTPUT.PUT_LINE('NEW SALARY: '||D);
RETURN D;
END UPDATE_SAL;

SET SERVEROUTPUT ON;
DECLARE 
D NUMBER;
BEGIN
D:=UPDATE_SAL(3,10000);
END;
SET SERVEROUTPUT OFF;
DROP FUNCTION UPDATE_SAL;
SELECT * FROM EMPLOYEE;

-->PRE-DEFINED EXCEPTIONS:
SELECT * FROM EMPLOYEE;
SET SERVEROUTPUT ON ;
DECLARE-->we take input from the user & keeping that input as base we will display corresponging record
E_ID EMPLOYEE.EMP_ID%TYPE;
E_NAME EMPLOYEE.EMP_NAME%TYPE;
BEGIN
SELECT EMP_NAME INTO E_NAME FROM EMPLOYEE WHERE EMP_ID=&E_ID;
DBMS_OUTPUT.PUT_LINE(E_NAME);
END;  -->give input id which is not present in the employee table
SET SERVEROUTPUT OFF;

-->exceptional handling for above example.
SET SERVEROUTPUT ON ;
DECLARE 
E_ID EMPLOYEE.EMP_ID%TYPE;
E_NAME EMPLOYEE.EMP_NAME%TYPE;
BEGIN
SELECT EMP_NAME INTO E_NAME FROM EMPLOYEE WHERE EMP_ID=&E_ID;
DBMS_OUTPUT.PUT_LINE(E_NAME);
EXCEPTION WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD ID IS NOT THERE');  -->EXCEPTION handled for above case
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR!'); 
END;  
SET SERVEROUTPUT OFF;

-->RAISING EXCEPTIONS
SET SERVEROUTPUT ON;
DECLARE
N NUMBER :=&N;
EX_INVALID EXCEPTION;
BEGIN
IF N>=5 THEN
RAISE EX_INVALID;
ELSE 
DBMS_OUTPUT.PUT_LINE('N IS LESS THEN 5');
END IF;
EXCEPTION WHEN EX_INVALID THEN
DBMS_OUTPUT.PUT_LINE('N IS GREATER THAN 5');
END;
SET SERVEROUTPUT OFF;

-->USER-DEFINED EXCEPTIONS
SELECT * FROM EMPLOYEE;
SET SERVEROUTPUT ON ;
DECLARE-->we take input from the user & keeping that input as base we will display corresponging record
E_ID EMPLOYEE.EMP_ID%TYPE:=&E_ID;
E_NAME EMPLOYEE.EMP_NAME%TYPE;
EX_INVALID EXCEPTION;
BEGIN
IF E_ID<=0 THEN 
RAISE EX_INVALID;
ELSE
SELECT EMP_NAME INTO E_NAME FROM EMPLOYEE WHERE EMP_ID=E_ID;
DBMS_OUTPUT.PUT_LINE(E_NAME);
END IF;
EXCEPTION WHEN EX_INVALID THEN   -->User defined exception
DBMS_OUTPUT.PUT_LINE('ID MUST BE GREATER THAN ZERO');
WHEN NO_DATA_FOUND THEN-->system defined or pre-defined exception
DBMS_OUTPUT.PUT_LINE('NO SUCH EMPLOYEE IS PRESENT IN THE RECORD WITH THE GIVEN ID');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR!');
END;
SET SERVEROUTPUT OFF ;

-->PACKAGES
SELECT * FROM DEPARTMENT;
CREATE OR REPLACE PACKAGE PACKAGE_DEPARTMENT-->PACKAGE SPECIFICATION
AS
PROCEDURE INSERT_DEPARTMENT(DEP_ID IN NUMBER,DEPT_NAME IN VARCHAR2);-->IN is used for input
PROCEDURE DELETE_DEPARTMENT(DELETE_ID IN NUMBER);
FUNCTION ADD_NUMBER(N1 IN NUMBER,N2 IN NUMBER)
RETURN NUMBER;
END;

CREATE OR REPLACE PACKAGE BODY PACKAGE_DEPARTMENT -->PACKAGE BODY
AS
PROCEDURE INSERT_DEPARTMENT(DEP_ID IN NUMBER,DEPT_NAME IN VARCHAR2)
IS
BEGIN
INSERT INTO DEPARTMENT VALUES (DEP_ID,DEPT_NAME);
END INSERT_DEPARTMENT;
PROCEDURE DELETE_DEPARTMENT(DELETE_ID IN NUMBER)
IS 
BEGIN
DELETE FROM DEPARTMENT WHERE DEP_ID=DELETE_ID;
END DELETE_DEPARTMENT;
FUNCTION ADD_NUMBER(N1 IN NUMBER, N2 IN NUMBER)
RETURN NUMBER 
IS
N3 NUMBER;
BEGIN
N3:=N1+N2;
RETURN N3;
END ADD_NUMBER;
END PACKAGE_DEPARTMENT;

SET SERVEROUTPUT ON;-->Using these procedures & functions
BEGIN-->Procedure 1 i.e Insert_department
PACKAGE_DEPARTMENT.INSERT_DEPARTMENT(6,'INSURANCE');
END;
SELECT * FROM DEPARTMENT;

BEGIN-->procedure 2 i.e delete_department
PACKAGE_DEPARTMENT.DELETE_DEPARTMENT(6);
DBMS_OUTPUT.PUT_LINE('RECORD DELETED');
END;
SELECT * FROM DEPARTMENT;

DECLARE-->Function 1 i.e add_number
N3 NUMBER;
BEGIN
N3:=PACKAGE_DEPARTMENT.ADD_NUMBER(50,20);
DBMS_OUTPUT.PUT_LINE('ADDITION OF N1 AND N2 IS '|| N3);
END;
SET SERVEROUTPUT OFF;
DROP PACKAGE BODY PACKAGE_DEPARTMENT;
DROP PACKAGE PACKAGE_DEPARTMENT;