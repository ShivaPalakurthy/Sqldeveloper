DROP TABLE ACCESSTABLE;
--CREATING ACCESSTABLE 
CREATE TABLE ADMINTABLE(
ADMIN_ID INTEGER PRIMARY KEY,
ADMINNAME VARCHAR2(50) NOT NULL,
EMAIL VARCHAR2(50) NOT NULL UNIQUE,
PASS VARCHAR2(50) NOT NULL)

SELECT * FROM ADMINTABLE;

--CREATING USERTABLE 
CREATE TABLE USER_TABLE(
USER_ID INTEGER PRIMARY KEY,
USERNAME VARCHAR2(50) NOT NULL,
EMAIL VARCHAR2(50) NOT NULL UNIQUE,
PASS VARCHAR2(50) NOT NULL)

SELECT * FROM USER_TABLE;
 
--CREATING FLIGHT_DATA TABLE
DROP TABLE FLIGHT_DATA;

CREATE TABLE FLIGHT_DATA(
FLIGHT_ID INTEGER PRIMARY KEY,
FLIGHT_DETAIL_ID INTEGER NOT NULL,
ADMIN_ID INTEGER REFERENCES ADMINTABLE(ADMIN_ID),
FLIGHT_COMPANY VARCHAR2(30) NOT NULL,
FLIGHT_SRC VARCHAR2(30) NOT NULL,
FLIGHT_DES VARCHAR2(30) NOT NULL,
TRAVEL_DATE_TIME TIMESTAMP,
BUSSINESS_TOTALSEATS INTEGER  CHECK(0<BUSSINESS_TOTALSEATS),
BUSSINESS_SEAT_AVAILABLE INTEGER CHECK(0<BUSSINESS_SEAT_AVAILABLE),
BUSINESSCLASS_PRICE DECIMAL(9,4) CHECK(0<BUSINESSCLASS_PRICE),
FIRSTCLASS_TOTALSEATS INTEGER CHECK(0<FIRSTCLASS_TOTALSEATS),
FIRST_SEAT_AVAILABLE INTEGER CHECK(0<FIRST_SEAT_AVAILABLE),
FIRSTCLASS_PRICE DECIMAL(9,4) CHECK(0<FIRSTCLASS_PRICE),
ECONOMYCLASS_TOTALSEATS INTEGER CHECK(0<ECONOMYCLASS_TOTALSEATS),
ECONOMY_SEAT_AVAILABLE INTEGER CHECK(0<ECONOMY_SEAT_AVAILABLE),
ECONOMYCLASS_PRICE DECIMAL(9,4) CHECK(0<ECONOMYCLASS_PRICE),
TOTAL_NOOFSEATS INTEGER  CHECK(0<TOTAL_NOOFSEATS), 
TOTAL_AVAILABLE_SEATS INTEGER  CHECK(0<TOTAL_AVAILABLE_SEATS) 
)
DESC FLIGHT_DATA
SELECT * FROM FLIGHT_DATA;

DROP SEQUENCE FLIGHT_ID_SEQ;
--CREATING SEQUENCE FOR TRAVEL_ID
 CREATE SEQUENCE FLIGHT_ID_SEQ
  START WITH 2341001
  INCREMENT BY 1
  CACHE 50;
    UPDATE FLIGHT_DATA
   SET FLIGHT_ID = FLIGHT_ID_SEQ.nextval;
CREATE OR REPLACE TRIGGER trg_FLIGHT_DATA_FLIGHT_ID
  BEFORE INSERT ON FLIGHT_DATA
  FOR EACH ROW
BEGIN
  :new.FLIGHT_ID := FLIGHT_ID_SEQ.nextval;
END;

DROP TABLE TRAVELLING_DETAILS ;
--CREATING TRAVELLING_DETAILS TABLE
CREATE TABLE TRAVELLING_DETAILS(
TRAVEL_ID INTEGER PRIMARY KEY,
USER_ID INTEGER REFERENCES USER_TABLE(USER_ID),
FLIGHT_ID INTEGER REFERENCES FLIGHT_DATA(FLIGHT_ID),
BOOKING_DATE TIMESTAMP,
TOTAL_SEATS_BOOKING INTEGER CHECK(1<=TOTAL_SEATS_BOOKING),
SEAT_TYPE CHAR(20) CHECK(SEAT_TYPE='BUSINESSCLASS' OR SEAT_TYPE='FIRSTCLASS' OR SEAT_TYPE='ECONOMYCLASS'),
FARE_PER_TICKET DECIMAL(9,4),
TOTAL_FARE DECIMAL(9,4),
TOAL_DISCOUNTAMMOUNT DECIMAL(9,4),
TOTAL_FARE_AFTER_DISCOUNT DECIMAL(9,4),
FARE_PER_TICKET_AFTER_DISCOUNT DECIMAL(9,4)
)

SELECT * FROM TRAVELLING_DETAILS;

DROP SEQUENCE TRAVEL_ID_SEQ;
--CREATING SEQUENCE FOR TRAVEL_ID
 CREATE SEQUENCE TRAVEL_ID_SEQ
  START WITH 230401001
  INCREMENT BY 1
  CACHE 50;
    UPDATE TRAVELLING_DETAILS
   SET TRAVEL_ID = TRAVEL_ID_SEQ.nextval;
CREATE OR REPLACE TRIGGER trg_TRAVELLING_DETAILS_TRAVEL_ID
  BEFORE INSERT ON TRAVELLING_DETAILS
  FOR EACH ROW
BEGIN
  :new.TRAVEL_ID := TRAVEL_ID_SEQ.nextval;
END;

DROP TABLE PASSENGER_BOOKING_DETAILS;
--CREATING PASSENGER_BOOKING_DETAILS TABLE
CREATE TABLE PASSENGER_BOOKING_DETAILS(
PNR INTEGER PRIMARY KEY,
TRAVEL_ID INTEGER REFERENCES TRAVELLING_DETAILS(TRAVEL_ID),
FNAME VARCHAR2(50) NOT NULL,
LNAME VARCHAR2(30) NOT NULL,
EMAIL VARCHAR2(60) NOT NULL,
AGE INTEGER NOT NULL CHECK(AGE<100),
SEAT_NUMBER INTEGER,
ADDRESS VARCHAR2(100) NOT NULL
)

 
DROP SEQUENCE PNR_GENERATION_SEQU;
--CREATING SEQUENCE FOR PNR
 CREATE SEQUENCE PNR_GENERATION_SEQU
  START WITH 202304010001
  INCREMENT BY 1
  CACHE 50;
    UPDATE PASSENGER_BOOKING_DETAILS
   SET PNR = PNR_GENERATION_SEQU.nextval;
CREATE OR REPLACE TRIGGER trg_PASSENGER_BOOKING_DETAILS_PNR
  BEFORE INSERT ON PASSENGER_BOOKING_DETAILS
  FOR EACH ROW
BEGIN
  :new.PNR := PNR_GENERATION_SEQU.nextval;
END;

SELECT * FROM PASSENGER_BOOKING_DETAILS;
